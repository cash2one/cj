<?php
/**
 * aid.php
 * 通过微信serverid/medaid获取媒体文件的接口
 * Create By Deepseath
 * $Author$
 * $Id$
 */
class voa_c_api_attachment_get_aid extends voa_c_api_attachment_base {

	protected function _before_action($action) {

		$this->_require_login = false;
		return parent::_before_action($action); // TODO: Change the autogenerated stub
	}

	/**
	 * 通过微信serverid/medaid获取媒体文件，并取得本地附件aid
	 * @todo 通过微信serverid下载文件到本地，并添加附件，输出该附件的aid
	 * @return boolean
	 */
	public function execute() {

		// 请求的参数
		$fields = array(
			// 微信serverid
			'serverid' => array('type' => 'string_trim', 'required' => true),
			'bigsize' => array('type' => 'int', 'required' => false),
			'thumbsize' => array('type' => 'int', 'required' => false)
		);
		if (!$this->_check_params($fields)) {
			return false;
		}
		if (empty($this->_params['serverid'])) {
			return $this->_set_errcode(voa_errcode_api_attachment::SERVERID_NULL);
		}

		$this->__get_by_serverid();

		return true;
	}


	/**
	 * 通过微信serverid（JS接口获取）取得aid
	 * @return boolean
	 */
	private function __get_by_serverid() {

		// 媒体文件内容
		$file = array();
		$serv = voa_wxqy_service::instance();
		if (!$serv->get_media($file, $this->_params['serverid'])) {
			$this->_errcode = $serv->errcode;
			$this->_errmsg = $serv->errmsg;
			return false;
		}

		// 检查文件合法性
		if (!$this->__chk_file_contents($file)) {
			return false;
		}

		// 写入本地附件文件
		$this->__save_local($file);

		return true;
	}

	/**
	 * 检查媒体文件内容合法性
	 * @return boolean
	 */
	private function __chk_file_contents($file_contents) {

		return true;
	}

	/**
	 * 保存文件到本地附件
	 * @param string $file_contents
	 * @return boolean
	 */
	private function __save_local($file) {

		// base64编码后的文件内容
		$file_field = $file['file_data'];
		// 上传配置
		//

		$config = array(
			'save_dir_path' => voa_h_func::get_attachdir(startup_env::get('domain')),
			'allow_files' => config::get(startup_env::get('app_name').'.attachment.file_type'),
			'file_name_format' => 'auto',
			'max_size' => 20480000,
			'source_name' => $file['file_name']
		);

		// var_dump($config['save_dir_path']);die;

		// 上传类型
		$type = 'local';
		// 自 content-type 获取文件扩展名
		$file_ext = $this->__get_ext($file['content_type']);
		if ($file_ext && strpos($config['source_name'], '.') === false) {
			$config['source_name'] .= '.'.$file_ext;
		}

		// 写入文件到附件目录
		$upload = new upload($file_field, $config, $type);
		$att = $upload->get_file_info();
		// 如果发生错误
		if (empty($att['error']) || rstrtolower($att['error']) != 'success') {
			$this->_errcode = 101;
			$this->_errmsg = empty($att['error']) ? '上传文件发生未知错误' : $att['error'];
			return false;
		}

		// 待写入附件表的数据
		$uid = startup_env::get('wbs_uid');
		$username = startup_env::get('wbs_username');
		$attachment = array(
			'm_uid' => empty($uid) ? 0 : $uid,
			'm_username' => empty($username) ? '' : $username,
			'at_filename' => $att['source_name'],
			'at_filesize' => $att['file_size'],
			'at_mediatype' => $att['media_type'],
			'at_attachment' => $att['save_path'],
			'at_remote' => 0,
			'at_description' => '',
			'at_isimage' => $att['is_image'] ? 1 : 0,
			'at_width' => $att['width'],
			'at_thumb' => empty($att['thumb']) ? 0 : 1
		);

		$serv = &service::factory('voa_s_oa_common_attachment', array('pluginid' => 0));
		$at_id = $serv->insert($attachment, true);
		if (empty($at_id)) {
			return $this->_set_errcode(voa_errcode_api_attachment::UPLOAD_GET_AID_ERROR);
		}

		$this->_result = array(
			'id' => (int)$at_id,// 附件id
			'url' => voa_h_attach::attachment_url($at_id, 0),// 原图
			'mediatype' => $attachment['at_mediatype'],// 媒体类型
			'big' => $this->_params['bigsize'] >= 0 ? voa_h_attach::attachment_url($at_id, $this->_params['bigsize']) : '', // 大图
			'thumb' => $this->_params['thumbsize'] >= 0 ? voa_h_attach::attachment_url($at_id, $this->_params['thumbsize']) : '',// 缩略图
			'filename' => rhtmlspecialchars($attachment['at_filename']),// 原始文件名
			'filesize' => $attachment['at_filesize'],// 文件大小
			'isimage' => $attachment['at_isimage'],// 是否是图片文件
		);

		return true;
	}

	/**
	 * 尝试自mime-content-type获取文件扩展名
	 * @param string $mime_type
	 * @return string
	 */
	private function __get_ext($mime_type) {

		if (!$mime_type) {
			return '';
		}

		$mime_types = array(
			'txt' => 'text/plain',
			'htm' => 'text/html',
			'html' => 'text/html',
			'php' => 'text/html',
			'css' => 'text/css',
			'js' => 'application/javascript',
			'json' => 'application/json',
			'xml' => 'application/xml',
			'swf' => 'application/x-shockwave-flash',
			'flv' => 'video/x-flv',

			// images
			'png' => 'image/png',
			'jpe' => 'image/jpeg',
			'jpeg' => 'image/jpeg',
			'jpg' => 'image/jpeg',
			'gif' => 'image/gif',
			'bmp' => 'image/bmp',
			'ico' => 'image/vnd.microsoft.icon',
			'tiff' => 'image/tiff',
			'tif' => 'image/tiff',
			'svg' => 'image/svg+xml',
			'svgz' => 'image/svg+xml',

			// archives
			'zip' => 'application/zip',
			'rar' => 'application/x-rar-compressed',
			'exe' => 'application/x-msdownload',
			'msi' => 'application/x-msdownload',
			'cab' => 'application/vnd.ms-cab-compressed',

			// audio/video
			'mp3' => 'audio/mpeg',
			'qt' => 'video/quicktime',
			'mov' => 'video/quicktime',

			// adobe
			'pdf' => 'application/pdf',
			'psd' => 'image/vnd.adobe.photoshop',
			'ai' => 'application/postscript',
			'eps' => 'application/postscript',
			'ps' => 'application/postscript',

			// ms office
			'doc' => 'application/msword',
			'rtf' => 'application/rtf',
			'xls' => 'application/vnd.ms-excel',
			'ppt' => 'application/vnd.ms-powerpoint',

			// open office
			'odt' => 'application/vnd.oasis.opendocument.text',
			'ods' => 'application/vnd.oasis.opendocument.spreadsheet',
		);

		$ext = array_search($mime_type, $mime_types);
		if ($ext === false) {
			return '';
		}

		return $ext;
	}

}
